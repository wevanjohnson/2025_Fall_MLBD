library(h2o)
h2o.init()
iris_h2o <- as.h2o(iris)
iris_h2o['Species'] <- as.factor(iris_h2o['Species'])
predictors <- colnames(iris_h2o)[-length(iris_h2o)]
iris_splits <- h2o.splitFrame(data = iris_h2o,
ratios = 0.7, seed = 1234)
train <- iris_splits[[1]]
valid <- iris_splits[[2]]
kmeans_model <- h2o.kmeans(training_frame = train,
x = predictors, k = 3,
seed = 1)
centers <- h2o.centers(kmeans_model)
centers
iris %>% ggplot(aes(Sepal.Length,Petal.Length)) +
geom_point(aes(col=Species), size=5) +
geom_point(aes(sepallength,petallength),
col=1, size=10, pch = 4, data=centers)
library(tidyverse)
TBnanostring <- readRDS("TBnanostring.rds")
TBnanostring[[1]] <- as.factor(TBnanostring[[1]])
colnames(TBnanostring)[1] <- "TB_Status"
datatable(TBnanostring, options = list(pageLength = 10))
suppressMessages({
library(tidyverse)
library(caret)
library(DT)
library(randomForest)
library(nnet)
library(e1071)
library(gbm)
library(pROC)
})
set.seed(0)
TBnanostring <- readRDS("TBnanostring.rds")
TBnanostring[[1]] <- as.factor(TBnanostring[[1]])
colnames(TBnanostring)[1] <- "TB_Status"
datatable(TBnanostring, options = list(pageLength = 10))
y <- TBnanostring$TB_Status
train_index <- createDataPartition(y, p = 0.7, list = FALSE)
train_index
set.seed(0)
y <- TBnanostring$TB_Status
train_index <- createDataPartition(y, p = 0.7, list = FALSE)
train_data <- TBnanostring[train_index, ]
test_data  <- TBnanostring[-train_index, ]
dim(train_data); dim(test_data)
set.seed(123)
true_labels <- factor(sample(c("TB", "LTBI"), 100, replace = TRUE))
predicted_prob <- runif(100)
roc_obj <- roc(true_labels, predicted_prob, levels = c("LTBI", "TB"))
auc_val <- auc(roc_obj)
plot(roc_obj, col = "#2C7BB6", lwd = 2, main = paste("ROC Curve (AUC =", round(auc_val, 3), ")"))
abline(a = 0, b = 1, lty = 2, col = "gray")
ctrl_cv <- trainControl(method = "repeatedcv", number = 5, repeats = 3,
classProbs = TRUE, summaryFunction = twoClassSummary,
savePredictions = "final", verboseIter = FALSE)
ctrl_none <- trainControl(method = "none", classProbs = TRUE, summaryFunction = twoClassSummary)
set.seed(123)
rf_model <- train(TB_Status ~ ., data = train_data,
method = "rf",
metric = "ROC", trControl = ctrl_cv)
rf_model
summary(rf_model)
rf_pred <- predict(rf_model, test_data)
confusionMatrix(rf_pred, test_data$TB_Status)
rev(levels(test_data$TB_Status))
levels(test_data$TB_Status)
rf_probs <- predict(rf_model, test_data, type = "prob")[, "TB"]
rf_roc <- roc(test_data$TB_Status, rf_probs, levels = rev(levels(test_data$TB_Status)))
plot(rf_roc, main = paste("RF ROC Curve (AUC =", round(auc(rf_roc), 3), ")"))
auc(rf_roc)
set.seed(123)
knn_model <- train(TB_Status ~ ., data = train_data,
method = "knn",
metric = "ROC", tuneLength = 10,
trControl = ctrl_cv, preProcess = c("center", "scale"))
knn_model
set.seed(123)
knn_model <- train(TB_Status ~ ., data = train_data,
method = "knn",
metric = "ROC", tuneLength = 30,
trControl = ctrl_cv, preProcess = c("center", "scale"))
knn_model
plot(knn_model)
knn_probs <- predict(knn_model, test_data, type = "prob")[, "TB"]
knn_roc <- roc(test_data$TB_Status, knn_probs, levels = rev(levels(test_data$TB_Status)))
plot(knn_roc, main = paste("KNN ROC Curve (AUC =", round(auc(knn_roc), 3), ")"))
auc(knn_roc)
set.seed(123)
knn_model <- train(TB_Status ~ ., data = train_data,
method = "knn",
metric = "ROC", tuneLength = 10,
trControl = ctrl_cv, preProcess = c("center", "scale"))
knn_model
plot(knn_model)
# ROC and AUC
knn_probs <- predict(knn_model, test_data, type = "prob")[, "TB"]
knn_roc <- roc(test_data$TB_Status, knn_probs, levels = rev(levels(test_data$TB_Status)))
plot(knn_roc, main = paste("KNN ROC Curve (AUC =", round(auc(knn_roc), 3), ")"))
auc(knn_roc)
set.seed(123)
knn_model <- train(TB_Status ~ ., data = train_data,
method = "knn",
metric = "ROC", tuneLength = 5,
trControl = ctrl_cv, preProcess = c("center", "scale"))
knn_model
plot(knn_model)
knn_pred <- predict(knn_model, test_data)
confusionMatrix(knn_pred, test_data$TB_Status)
knn_probs <- predict(knn_model, test_data, type = "prob")[, "TB"]
knn_roc <- roc(test_data$TB_Status, knn_probs, levels = rev(levels(test_data$TB_Status)))
plot(knn_roc, main = paste("KNN ROC Curve (AUC =", round(auc(knn_roc), 3), ")"))
auc(knn_roc)
set.seed(123)
knn_model <- train(TB_Status ~ ., data = train_data,
method = "knn",
metric = "ROC", tuneLength = 2,
trControl = ctrl_cv, preProcess = c("center", "scale"))
knn_model
plot(knn_model)
knn_pred <- predict(knn_model, test_data)
confusionMatrix(knn_pred, test_data$TB_Status)
# ROC and AUC
knn_probs <- predict(knn_model, test_data, type = "prob")[, "TB"]
knn_roc <- roc(test_data$TB_Status, knn_probs, levels = rev(levels(test_data$TB_Status)))
plot(knn_roc, main = paste("KNN ROC Curve (AUC =", round(auc(knn_roc), 3), ")"))
auc(knn_roc)
set.seed(123)
rf_model <- train(TB_Status ~ ., data = train_data,
method = "rf", metric = "ROC",
importance = TRUE, trControl = ctrl_cv)
rf_model
rf_pred <- predict(rf_model, test_data)
confusionMatrix(rf_pred, test_data$TB_Status)
rf_probs <- predict(rf_model, test_data, type = "prob")[, "TB"]
rf_roc <- roc(test_data$TB_Status, rf_probs, levels = rev(levels(test_data$TB_Status)))
plot(rf_roc, main = paste("Random Forest ROC Curve (AUC =", round(auc(rf_roc), 3), ")"))
auc(rf_roc)
rf_imp <- varImp(rf_model, scale = TRUE)
plot(rf_imp, top = 10, main = "Top 10 Important Genes (Random Forest)")
rf_imp <- varImp(rf_model, scale = FALSE)
plot(rf_imp, top = 10, main = "Top 10 Important Genes (Random Forest)")
rf_imp <- varImp(rf_model, scale = TRUE)
plot(rf_imp, top = 10, main = "Top 10 Important Genes (Random Forest)")
rf_probs <- predict(rf_model, test_data, type = "prob")[, "TB"]
rf_roc <- roc(test_data$TB_Status, rf_probs, levels = rev(levels(test_data$TB_Status)))
plot(rf_roc, main = paste("Random Forest ROC Curve (AUC =", round(auc(rf_roc), 3), ")"))
auc(rf_roc)
set.seed(123)
svm_model <- train(TB_Status ~ ., data = train_data,
method = "svmRadial", metric = "ROC",
preProcess = c("center", "scale"),
trControl = ctrl_cv, tuneLength = 10)
svm_model
plot(svm_model)
svm_pred <- predict(svm_model, test_data)
confusionMatrix(svm_pred, test_data$TB_Status)
svm_probs <- predict(svm_model, test_data, type = "prob")[, "TB"]
svm_roc <- roc(test_data$TB_Status, svm_probs, levels = rev(levels(test_data$TB_Status)))
plot(svm_roc, main = paste("SVM ROC Curve (AUC =", round(auc(svm_roc), 3), ")"))
auc(svm_roc)
set.seed(123)
nnet_model <- train(TB_Status ~ ., data = train_data,
method = "nnet", metric = "ROC",
preProcess = c("center", "scale"), trControl = ctrl_cv,
tuneLength = 10, trace = FALSE)
nnet_pred <- predict(nnet_model, test_data)
confusionMatrix(nnet_pred, test_data$TB_Status)
set.seed(123)
gbm_model <- train(TB_Status ~ ., data = train_data,
method = "gbm", metric = "ROC",
trControl = ctrl_cv, verbose = FALSE,
tuneLength = 10)
gbm_model
plot(gbm_model)
gbm_pred <- predict(gbm_model, test_data)
confusionMatrix(gbm_pred, test_data$TB_Status)
gbm_imp <- varImp(gbm_model, scale = TRUE)
plot(gbm_imp, top = 10, main = "Top 10 Important Genes (GBM)")
plot(gbm_imp, top = 20, main = "Top 10 Important Genes (GBM)")
suppressWarings(
nnet_model <- train(TB_Status ~ ., data = train_data,
method = "nnet", metric = "ROC",
preProcess = c("center", "scale"), trControl = ctrl_cv,
tuneLength = 10, trace = FALSE)
)
suppressWarnings(
nnet_model <- train(TB_Status ~ ., data = train_data,
method = "nnet", metric = "ROC",
preProcess = c("center", "scale"), trControl = ctrl_cv,
tuneLength = 10, trace = FALSE)
)
set.seed(123)
methods_list <- c("knn", "svmRadial", "gbm")
# Use caretList() much like we use train(), except this time we pass in multiple algorithms to run at once.
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list)
library(caret)
caretList
library(caretEnsemble)
install.packages("caretEnsemble")
ibrary(caretEnsemble)
library(caretEnsemble)
set.seed(123)
methods_list <- c("knn", "svmRadial", "gbm")
# Use caretList() much like we use train(), except this time we pass in multiple algorithms to run at once.
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list)
# Try a ensemble using 'random forest' of our individual models
ens <- caretStack(models, metric = "ROC", method = "rf",
trControl = ctrl_cv)
# ROC and AUC
ens_probs <- unlist(predict(ens, test_data)[,"TB"])
ens_roc <- roc(test_data$TB_Status, ens_probs, levels = rev(levels(test_data$TB_Status)))
plot(ens_roc, main = paste("Ensemble ROC Curve (AUC =",
round(auc(ens_roc), 3), ")"))
auc(ens_roc)
models <- suppressMessages(caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list))
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list, verbose = FALSE)
suppressMessages(
suppressWarnings(
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list)
))
ctrl_cv <- trainControl(method = "repeatedcv", number = 5, repeats = 3,
classProbs = TRUE, summaryFunction = twoClassSummary,
savePredictions = "final", verboseIter = FALSE, verbose=F)
ctrl_cv <- trainControl(
method = "cv",
number = 10,
savePredictions = "final",
classProbs = TRUE,
summaryFunction = twoClassSummary,
verbose = FALSE
)
ctrl_cv <- trainControl(method = "cv", number = 10, savePredictions = "final",
classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list)
suppressMessages(
suppressWarnings(
models <- caretList(TB_Status ~ . , data = train_data,
trControl = ctrl_cv, metric = "ROC",
tuneLength = 10, methodList = methods_list)
))
train_silent <- function(method) {
suppressMessages(
suppressWarnings(
caret::train(
TB_Status ~ ., data = train_data,
method = method,
trControl = ctrl_cv,
metric = "ROC",
tuneLength = 10
)
)
)
}
models <- lapply(methods_list, train_silent)
names(models) <- methods_list
